package matrix.matrix;

/**
 * Provides a collection of methods to manipulate arrays as matrices. A 
 * <i>matrix</i> is defined to be a rectangular array of numbers (which can be
 * represented as Number[][]). The size of the array is known as the
 * <i>order</i> of the matrix, denoted m x n, where m is the amount of rows and
 * n the columns. Each element of a matrix is known as an <i>entry</i>,
 * accessible by its unique row and column, also known as the entry's order.
 * @author Robert Sedgewick and Kevin Wayne
 */
public class MatrixMath {

    /**
     * Returns an array representing a matrix with specified order and 
     * psuedorandom entry values, generated by the java.lang.Math class.
     * @param m the number of rows of the array
     * @param n the number of columns of the array
     * @return an m x n array with random values
     */
    public static double[][] random(int m, int n) {
        double[][] C = new double[m][n];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                C[i][j] = Math.random();
        return C;
    }

    /**
     * Returns an array representing an identity matrix of specified size. The 
     * identity matrix is defined to be a square matrix with ones as all entries
     * with the same delineating row and column. The rest of the entries have 
     * the value of zero.
     * @param n the number of rows and columns of the array
     * @return an n x n array representing an identity matrix (I sub n)
     */
    public static double[][] identity(int n) {
        double[][] I = new double[n][n];
        for (int i = 0; i < n; i++)
            I[i][i] = 1;
        return I;
    }
    
    /**
     * Returns an array representing the zero matrix of specified size. The
     * zero matrix is defined to be a matrix solely containing zeros.
     * @param m the number of rows of the array
     * @param n the number of columns of the array
     * @return an m x n array entirely of zeros
     */
    public static double[][] zero(int m, int n) {
        return new double[m][n];
    }

    /**
     * Returns the dot product of two arrays as defined in vectors. In vectors, 
     * the dot product is the scalar sum of the products of each of the 
     * corresponding entries in two arrays.
     * @param x
     * @return 
     */
    public static double dot(double[]... x) {
        int m = x.length;
        for (double[] arr : x) {
            if (arr.length != m) {
                throw new RuntimeException();
            }
        }
        double sum = 0.0;
        double product;
        for (int i = 0; i < x[0].length; i++) {
            product = 1;
            for (int j = 0 ; j < x.length ; j++) {
               product *= x[i][j];
            }
            sum += product;
        }
        return sum;
    }

    /**
     * Returns an array representing the transposition of the specified
     * array. The transposition of of a matrix is defined to be the matrix
     * whose rows represent the columns of the original matrix.
     * @param A
     * @return 
     */
    public static double[][] transpose(double[][] A) {
        int m = A.length;
        int n = A[0].length;
        double[][] C = new double[n][m];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                C[j][i] = A[i][j];
        return C;
    }

    /**
     * Returns the difference of arrays as defined by matrix subtraction. In matrix
     * addition, the corresponding entries of multiple matrices are summed to 
     * form the resultant entry. As a direct consequence, the arrays must be of
     * the same dimensions.
     * @param A the arrays to be summed
     * @return an array representing the sum of the arrays by matrix addition
     */
    public static double[][] add(double[][]... A) {
        int m = A[0].length;
        int n = A[0][0].length;
        double[][] C = new double[m][n];
        for (double[][] arr : A) {
            for (int i = 0 ; i < m ; i++) {
                for (int j = 0 ; j < n ; j++) {
                    C[i][j] += arr[i][j];
                }
            }
        }
        return C;
    }

    /**
     * Returns the sum of arrays as defined by matrix addition. In matrix
     * addition, the corresponding entries of multiple matrices are summed to 
     * form the resultant entry. As a direct consequence, the arrays must be of
     * the same dimensions.
     * @param A the arrays to be summed
     * @return an array representing the sum of the arrays by matrix addition
     */
    public static double[][] subtract(double[][] A, double[][] B) {
        int m = A.length;
        int n = A[0].length;
        double[][] C = new double[m][n];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                C[i][j] = A[i][j] - B[i][j];
        return C;
    }

    // matrix-matrix multiplication (C = A * b)
    public static double[][] multiply(double[][] A, double[][] B) {
        int mA = A.length;
        int nA = A[0].length;
        int mB = B.length;
        int nB = B[0].length;
        if (nA != mB) throw new RuntimeException("Illegal matrix dimensions.");
        double[][] C = new double[mA][nB];
        for (int i = 0; i < mA; i++)
            for (int j = 0; j < nB; j++)
                for (int k = 0; k < nA; k++)
                    C[i][j] += (A[i][k] * B[k][j]);
        return C;
    }
    
    // scalar-matrix multiplicatoin (B = k * A)
    public static double[][] multiply(double k, double[][] A) {
        double[][] B = new double[A.length][A[0].length];
        for (int r = 0 ; r < A.length ; r++) {
            for (int c = 0 ; c < A[0].length ; c++) {
                B[r][c] = k * A[r][c];
            }
        }
        return B;
        
    }
    
    // matrix-vector multiplication (y = A * x)
    public static double[] multiply(double[][] A, double[] x) {
        int m = A.length;
        int n = A[0].length;
        if (x.length != n) throw new RuntimeException("Illegal matrix dimensions.");
        double[] y = new double[m];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                y[i] += (A[i][j] * x[j]);
        return y;
    }

    
    // vector-matrix multiplication (y = x^T A)
    public static double[] multiply(double[] x, double[][] A) {
        int m = A.length;
        int n = A[0].length;
        if (x.length != m) throw new RuntimeException("Illegal matrix dimensions.");
        double[] y = new double[n];
        for (int j = 0; j < n; j++)
            for (int i = 0; i < m; i++)
                y[j] += (A[i][j] * x[i]);
        return y;
    }
}
/*
Copyright © 2000–2011, Robert Sedgewick and Kevin Wayne. 
Last updated: Wed Feb 11 14:17:51 EST 2015.
*/