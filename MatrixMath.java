package matrix;

/**
 * Provides a collection of methods to manipulate arrays as matrices. A 
 * <i>matrix</i> is defined to be a rectangular array of numbers (which can be
 * represented as Number[][], or as used here, double[][]). 
 * 
 * <p>A, B, C... are often used to refer to matrices. They are typically bolded
 * in printed text, but for brevity will not be in this documentation.
 * 
 * <p>The size of the matrix is known as the <i>order</i> of the matrix, 
 * describing its number of rows and columns.
 * 
 * <p> m and n are often used to refer to the order of matrices, where m x n 
 * denotes the m rows and n columns of a matrix.
 * 
 * <p>Each element of a matrix is known as an <i>entry</i>,
 * accessible by its unique row and column, also known as the <i>entry's order.</i>
 * 
 * <p>a is often used to denote an entry, and i and j the entry's order (put 
 * together to form a sub ij).
 *
 * @author Robert Sedgewick and Kevin Wayne
 */
public class MatrixMath {

    /**
     * Returns an array representing a matrix with specified order and 
     * psuedorandom entry values, generated by the java.lang.Math class.
     * @param m the number of rows of the array
     * @param n the number of columns of the array
     * @return an m x n array with random values
     */
    public static double[][] random(int m, int n) {
        double[][] C = new double[m][n];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                C[i][j] = Math.random();
        return C;
    }

    /**
     * Returns an array representing an identity matrix of specified size. The 
     * identity matrix is defined to be a square matrix with ones as all entries
     * with the same delineating row and column. The rest of the entries have 
     * the value of zero.
     * @param n the number of rows and columns of the array
     * @return an n x n array representing an identity matrix (I sub n)
     */
    public static double[][] identity(int n) {
        double[][] I = new double[n][n];
        for (int i = 0; i < n; i++)
            I[i][i] = 1;
        return I;
    }
    
    /**
     * Returns an array representing the zero matrix of specified size. The
     * zero matrix is defined to be a matrix solely containing zeros.
     * @param m the number of rows of the array
     * @param n the number of columns of the array
     * @return an m x n array entirely of zeros
     */
    public static double[][] zero(int m, int n) {
        return new double[m][n];
    }

    /**
     * Returns the dot product of multiple arrays as defined by vectors.
     * In vectors, the dot product is the scalar sum of the products of 
     * each of the corresponding entries in multiple arrays.
     * @param x the vectors to calculate the dot product of
     * @return the dot product of the vectors (denoted A · B)
     */
    public static double dot(double[]... x) {
        int m = x.length;
        for (double[] arr : x) {
            if (arr.length != m) {
                throw new RuntimeException();
            }
        }
        double sum = 0.0;
        double product;
        for (int i = 0; i < x[0].length; i++) {
            product = 1;
            for (int j = 0 ; j < x.length ; j++) {
               product *= x[i][j];
            }
            sum += product;
        }
        return sum;
    }

    /**
     * Returns an array representing the transposition of the specified matrix. 
     * 
     * <p>The <i>transposition of a matrix</i> is defined to be the matrix whose 
     * rows represent the columns of the original matrix. Equivalently, the 
     * the columns representing the rows of the original; colloquially, the 
     * matrix is "reflected" across its main diagonal (where the entries' row 
     * and column order are equal).
     * @param A the array to be transposed
     * @return the transposition of an array ( denoted A^T)
     */
    public static double[][] transpose(double[][] A) {
        int m = A.length;
        int n = A[0].length;
        double[][] C = new double[n][m];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                C[j][i] = A[i][j];
        return C;
    }

    /**
     * Returns an array representing the sum of multiple matrices. 
     * In matrix addition, the corresponding entries of multiple matrices are 
     * summed to form the resultant entry. As a direct consequence, the arrays 
     * must be of the same order.
     * @param A the addend arrays representing matrices
     * @return the sum of the matrices (denoted A + B)
     */
    public static double[][] add(double[][]... A) {
        int m = A[0].length;
        int n = A[0][0].length;
        double[][] C = new double[m][n];
        for (double[][] arr : A) {
            for (int i = 0 ; i < m ; i++) {
                for (int j = 0 ; j < n ; j++) {
                    C[i][j] += arr[i][j];
                }
            }
        }
        return C;
    }

    /**
     * Returns an array representing the difference of multiple matrices. 
     * 
     * <p>In matrix subtraction, the corresponding entries of multiple matrices 
     * are subtracted to form the resultant entry. As a direct consequence, the 
     * arrays must be of the same order.
     * @param A the minuend array representing a matrix
     * @param B the subtrahend array representing a matrix
     * @return the difference of the two matrices (denoted A - B)
     */
    public static double[][] subtract(double[][] A, double[][] B) {
        int m = A.length;
        int n = A[0].length;
        double[][] C = new double[m][n];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                C[i][j] = A[i][j] - B[i][j];
        return C;
    }

    /**
     * Returns an array representing the product of two matrices.  
     * 
     * <p>In matrix multiplication, the resultant entry sub ij is equal to the 
     * scalar (dot) product of the ith row of the initial matrix and jth column 
     * of the terminal. As a direct consequence, the column order of the initial
     * array must be equal to the row order of the terminal. The 
     * resultant matrix will be of order Bm x An.
     * @param A the initial array representing a matrix
     * @param B the terminal array representing a matrix
     * @return the product of the two matrices (denoted AB)
     */
    public static double[][] multiply(double[][] A, double[][] B) {
        int mA = A.length;
        int nA = A[0].length;
        int mB = B.length;
        int nB = B[0].length;
        if (nA != mB) throw new RuntimeException("Illegal matrix dimensions.");
        double[][] C = new double[mA][nB];
        for (int i = 0; i < mA; i++)
            for (int j = 0; j < nB; j++)
                for (int k = 0; k < nA; k++)
                    C[i][j] += (A[i][k] * B[k][j]);
        return C;
    }
    
    /**
     * Returns an array representing the product of a scalar and a matrix.
     * 
     * <p>Each entry of the matrix is multiplied by the scalar.
     * @param k a scalar
     * @param A an array representing a matrix
     * @return the product of the scalar and the array (denoted kA)
     */
    public static double[][] multiply(double k, double[][] A) {
        double[][] B = new double[A.length][A[0].length];
        for (int r = 0 ; r < A.length ; r++) {
            for (int c = 0 ; c < A[0].length ; c++) {
                B[r][c] = k * A[r][c];
            }
        }
        return B;
        
    }
    
    /**
     * Returns an array representing the product of a matrix and a vector. 
     * <p>This is equivalent to multiplying a matrix and a 1 x n matrix. As a 
     * direct consequence, the column order of the initial array must be equal 
     * to the order (number of elements) of the vector.
     * 
     * <p>Note that this returns a vector. This can easily be converted to a 
     * matrix by (1) creating a 2D array and using the result of the
     * multiplication as the sole row or (2) using
     * {@link MatrixMath.vectorToMatrix(double[]).}
     * @param A an array representing a matrix
     * @param x an array representing a vector
     * @return the product of a matrix and a vector
     */
    public static double[] multiply(double[][] A, double[] x) {
        int m = A.length;
        int n = A[0].length;
        if (x.length != n) throw new RuntimeException("Illegal matrix dimensions.");
        double[] y = new double[m];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                y[i] += (A[i][j] * x[j]);
        return y;
    }
    
    /**
     * Returns an array representing the product of a vector and a matrix.
     * 
     * <p>In contrast to {@link multiply(double[][] A, x is now considered a 
     * columnar matrix (there is no sense of row/column in a typical vector). 
     * As a direct consequence, the order of the vector must be equal to the 
     * column order of the matrix.
     * @param x an array representing a vector
     * @param A an array representing a matrix
     * @return the product of a vector and a matrix
     */
    public static double[] multiply(double[] x, double[][] A) {
        int m = A.length;
        int n = A[0].length;
        if (x.length != m) throw new RuntimeException("Illegal matrix dimensions.");
        double[] y = new double[n];
        for (int j = 0; j < n; j++)
            for (int i = 0; i < m; i++)
                y[j] += (A[i][j] * x[i]);
        return y;
    }
}
/*
Copyright © 2000–2011, Robert Sedgewick and Kevin Wayne. 
Last updated: Wed Feb 11 14:17:51 EST 2015.
*/
